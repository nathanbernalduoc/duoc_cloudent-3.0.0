{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./pacientes.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./pacientes.component.css?ngResource\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { PacientesService } from '../../services/pacientes.service';\n/**\n * @descripcion\n * Administración de pacientes\n *\n * Permite administrar los usuarios para ser usados\n * en la agendamiento de horaras.\n *\n */\n/**\n *\n * @usageNotes\n *\n * Agregar pacientes\n * Quitar pacientes\n * Pacientes almacenados en un arreglo temporal\n *\n **/\nlet PacientesComponent = class PacientesComponent {\n  router;\n  fb;\n  jsonPacientes;\n  paciente = {};\n  pacientes = [];\n  pacienteForm;\n  p = '';\n  constructor(router, fb, jsonPacientes) {\n    this.router = router;\n    this.fb = fb;\n    this.jsonPacientes = jsonPacientes;\n  }\n  ngOnInit() {\n    console.log('Pacientes');\n    this.pacienteForm = this.fb.group({\n      rut: ['', Validators.required],\n      nombres: ['', Validators.required],\n      apellidos: ['', Validators.required],\n      direccion: [''],\n      telefono: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]]\n    });\n    this.jsonPacientes.getPacientes().subscribe(data => {\n      console.log(data);\n      this.pacientes = data;\n    });\n  }\n  setPacientesList() {\n    if (this.pacientes != undefined) {\n      console.log('Registros ' + this.pacientes.length);\n      for (var cantidad = 0; cantidad < this.pacientes.length; cantidad++) {\n        console.log(this.pacientes[cantidad].nombres);\n        this.paciente.rut = this.pacientes[cantidad].rut;\n        this.paciente.nombres = this.pacientes[cantidad].nombres;\n        this.paciente.apellidos = this.pacientes[cantidad].apellidos;\n        this.paciente.direccion = this.pacientes[cantidad].direccion;\n        this.paciente.telefono = this.pacientes[cantidad].telefono;\n        this.paciente.email = this.pacientes[cantidad].email;\n        this.pacientes.push(this.paciente);\n      }\n    }\n    console.log(this.pacientes);\n  }\n  submitForm() {\n    if (!this.pacienteForm.valid) {\n      alert('Revise los datos proporcionados, se han encontrado errores de validaciones.');\n    } else {\n      console.log('Guardando paciente.');\n      this.setPaciente();\n    }\n  }\n  setPaciente() {\n    var rut = this.pacienteForm.get('rut').value;\n    var nombres = this.pacienteForm.get('nombres').value;\n    var apellidos = this.pacienteForm.get('apellidos').value;\n    var direccion = this.pacienteForm.get('direccion').value;\n    var telefono = this.pacienteForm.get('telefono').value;\n    var email = this.pacienteForm.get('email').value;\n    this.paciente.rut = rut;\n    this.paciente.nombres = nombres;\n    this.paciente.apellidos = apellidos;\n    this.paciente.direccion = direccion;\n    this.paciente.telefono = telefono;\n    this.paciente.email = email;\n    console.log(this.pacientes);\n    this.pacientes.push(this.paciente);\n    localStorage.setItem('pacientes', JSON.stringify(this.pacientes));\n  }\n  unsetCliente(id) {\n    console.log('Quitando pacientes ' + id);\n    this.pacientes.splice(id, 1);\n    localStorage.setItem('pacientes', JSON.stringify(this.pacientes));\n  }\n  static ctorParameters = () => [{\n    type: Router\n  }, {\n    type: FormBuilder\n  }, {\n    type: PacientesService\n  }];\n};\nPacientesComponent = __decorate([Component({\n  selector: 'app-pacientes',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, HttpClientModule],\n  template: __NG_CLI_RESOURCE__0,\n  providers: [PacientesService],\n  styles: [__NG_CLI_RESOURCE__1]\n})], PacientesComponent);\nexport { PacientesComponent };","map":{"version":3,"names":["Component","CommonModule","Router","FormBuilder","ReactiveFormsModule","Validators","HttpClientModule","PacientesService","PacientesComponent","router","fb","jsonPacientes","paciente","pacientes","pacienteForm","p","constructor","ngOnInit","console","log","group","rut","required","nombres","apellidos","direccion","telefono","email","getPacientes","subscribe","data","setPacientesList","undefined","length","cantidad","push","submitForm","valid","alert","setPaciente","get","value","localStorage","setItem","JSON","stringify","unsetCliente","id","splice","__decorate","selector","standalone","imports","template","__NG_CLI_RESOURCE__0","providers"],"sources":["/Users/jonathanbernal/Projects/Duoc/fullstack_2/duoc_cloudent-3.0.0/src/app/componentes/pacientes/pacientes.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { formatDate, CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { PacientesService } from '../../services/pacientes.service';\n\n/**\n * @descripcion\n * Administración de pacientes\n * \n * Permite administrar los usuarios para ser usados\n * en la agendamiento de horaras.\n * \n */\n\n/**\n * \n * @usageNotes\n * \n * Agregar pacientes\n * Quitar pacientes\n * Pacientes almacenados en un arreglo temporal\n *\n **/\n\n\n@Component({\n  selector: 'app-pacientes',\n  standalone: true,\n  imports: [ CommonModule,ReactiveFormsModule, HttpClientModule],\n  templateUrl: './pacientes.component.html',\n  styleUrl: './pacientes.component.css',\n  providers: [PacientesService]\n})\n\nexport class PacientesComponent {\n\n  paciente: any = {};\n  pacientes: any[] = [];\n  pacienteForm!: FormGroup;\n  p: string = '';\n\n  constructor(private router: Router, private fb: FormBuilder, private jsonPacientes: PacientesService) {}\n\n  ngOnInit(): void {\n\n    console.log('Pacientes');\n\n    this.pacienteForm = this.fb.group({\n      rut: ['', Validators.required],\n      nombres: ['', Validators.required],\n      apellidos: ['', Validators.required],\n      direccion: [''],\n      telefono: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]]\n    });\n\n    this.jsonPacientes.getPacientes().subscribe(\n      data=> {\n        console.log(data);\n        this.pacientes = data;\n      }\n    )\n\n  }\n\n  setPacientesList(): void {\n\n    if (this.pacientes != undefined) {\n\n      console.log('Registros '+this.pacientes.length);\n\n      for(var cantidad = 0; cantidad<this.pacientes.length; cantidad++) {\n\n        console.log(this.pacientes[cantidad].nombres);\n\n        this.paciente.rut = this.pacientes[cantidad].rut;\n        this.paciente.nombres = this.pacientes[cantidad].nombres;\n        this.paciente.apellidos = this.pacientes[cantidad].apellidos;\n        this.paciente.direccion = this.pacientes[cantidad].direccion;\n        this.paciente.telefono = this.pacientes[cantidad].telefono;\n        this.paciente.email = this.pacientes[cantidad].email;\n        this.pacientes.push(this.paciente);\n\n      }\n\n    }\n\n    console.log(this.pacientes);\n\n  }\n\n  submitForm(): void {\n    if (!this.pacienteForm.valid) {\n      alert('Revise los datos proporcionados, se han encontrado errores de validaciones.');\n    } else {\n      console.log('Guardando paciente.');\n      this.setPaciente();\n    }\n  }\n\n  setPaciente(): void {\n\n    var rut = this.pacienteForm.get('rut')!.value;\n    var nombres = this.pacienteForm.get('nombres')!.value;\n    var apellidos = this.pacienteForm.get('apellidos')!.value;\n    var direccion = this.pacienteForm.get('direccion')!.value;\n    var telefono = this.pacienteForm.get('telefono')!.value;\n    var email = this.pacienteForm.get('email')!.value;\n\n    this.paciente.rut = rut;\n    this.paciente.nombres = nombres;\n    this.paciente.apellidos = apellidos;\n    this.paciente.direccion = direccion;\n    this.paciente.telefono = telefono;\n    this.paciente.email = email;\n\n    console.log(this.pacientes);\n    this.pacientes.push(this.paciente);\n\n    localStorage.setItem('pacientes', JSON.stringify(this.pacientes));\n\n  }\n\n  unsetCliente(id: number): void {\n\n    console.log('Quitando pacientes '+id);\n\n    this.pacientes.splice(id, 1);\n    localStorage.setItem('pacientes', JSON.stringify(this.pacientes));\n\n  } \n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}